{
  "version": 3,
  "sources": ["../../gridstack/src/h5/dd-manager.ts", "../../gridstack/src/h5/dd-resizable-handle.ts", "../../gridstack/src/h5/dd-base-impl.ts", "../../gridstack/src/h5/dd-utils.ts", "../../gridstack/src/h5/dd-resizable.ts", "../../gridstack/src/h5/dd-draggable.ts", "../../gridstack/src/h5/dd-droppable.ts", "../../gridstack/src/h5/dd-element.ts", "../../gridstack/src/gridstack-dd.ts", "../../gridstack/src/h5/gridstack-dd-native.ts"],
  "sourcesContent": ["/**\n * dd-manager.ts 5.1.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n", "/**\n * dd-resizable-handle.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n", "/**\n * dd-base-impl.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled = false;\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n", "/**\n * dd-utils.ts 5.1.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n\n  /** returns true if event is inside the given element rectangle */\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\n  //    this.el.contains(event.relatedTarget as HTMLElement)\n  public static inside(e: MouseEvent, el: HTMLElement): boolean {\n    // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\n    let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\n    if (!target) {\n      const { bottom, left, right, top } = el.getBoundingClientRect();\n      return (e.x < right && e.x > left && e.y < bottom && e.y > top);\n    }\n    return el.contains(target);\n  }\n}", "/**\n * dd-resizable.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n", "/**\n * dd-draggable.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragFollowTimer: number;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal */\n  protected dragging = false;\n  /** @internal */\n  protected paintTimer: number;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  protected static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange', 'min-width'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  protected _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n      // immediately set external helper initial position to avoid flickering behavior and unnecessary looping in `_packNodes()`\n      this._dragFollow(event);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  protected _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  protected _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  protected _setupHelperStyle(): DDDraggable {\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const rec = this.helper.getBoundingClientRect();\n    const style = this.helper.style;\n    style.pointerEvents = 'none';\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    style.left = rec.left + 'px';\n    style.top = rec.top + 'px';\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHelperStyle(): DDDraggable {\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed' \n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  protected _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default ghost image to be created (which has wrong as we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the ghost image around (and special case jq version) ?\n   **/\n  protected _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    img.style.position = 'fixed'; // prevent unwanted scrollbar\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n", "/**\n * dd-droppable.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { GridHTMLElement, GridStack } from '../gridstack';\nimport { GridItemHTMLElement } from '../types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\n// TEST let count = 0;\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  protected moving: boolean;\n  protected static lastActive: DDDroppable;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    this._removeLeaveCallbacks();\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _dragEnter(event: DragEvent): void {\n    // TEST console.log(`${count++} Enter ${(this.el as GridHTMLElement).gridstack.opts.id}`);\n    if (!this._canDrop()) return;\n    event.preventDefault();\n    event.stopPropagation();\n\n    // ignore multiple 'dragenter' as we go over existing items\n    if (this.moving) return;\n    this.moving = true;\n\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    // Update: removed that as it causes nested grids to no receive dragenter events when parent drags and sets this for #992. not seeing cursor flicker (chrome).\n    // this.el.classList.add('ui-droppable-over');\n\n    // make sure when we enter this, that the last one gets a leave to correctly cleanup as we don't always do\n    if (DDDroppable.lastActive && DDDroppable.lastActive !== this) {\n      DDDroppable.lastActive._dragLeave(event, true);\n    }\n    DDDroppable.lastActive = this;\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  protected _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _dragLeave(event: DragEvent, forceLeave?: boolean): void {\n    // TEST console.log(`${count++} Leave ${(this.el as GridHTMLElement).gridstack.opts.id}`);\n    event.preventDefault();\n    event.stopPropagation();\n\n    // ignore leave events on our children (we get them when starting to drag our items)\n    // but exclude nested grids since we would still be leaving ourself, \n    // but don't handle leave if we're dragging a nested grid around\n    if (!forceLeave) {\n      let onChild = DDUtils.inside(event, this.el);\n      let drag: GridItemHTMLElement = DDManager.dragElement.el;\n      if (onChild && !drag.gridstackNode?.subGrid) { // dragging a nested grid ?\n        let nestedEl = (this.el as GridHTMLElement).gridstack.engine.nodes.filter(n => n.subGrid).map(n => (n.subGrid as GridStack).el);\n        onChild = !nestedEl.some(el => DDUtils.inside(event, el));\n      }\n      if (onChild) return;\n    }\n\n    if (this.moving) {\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n    this._removeLeaveCallbacks();\n\n    if (DDDroppable.lastActive === this) {\n      delete DDDroppable.lastActive;\n    }\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  protected _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  protected _removeLeaveCallbacks() {\n    if (!this.moving) { return; }\n    delete this.moving;\n    this.el.removeEventListener('dragover', this._dragOver);\n    this.el.removeEventListener('drop', this._drop);\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    // Update: removed that as it causes nested grids to no receive dragenter events when parent drags and sets this for #992. not seeing cursor flicker (chrome).\n    // this.el.classList.remove('ui-droppable-over');\n  }\n\n  /** @internal */\n  protected _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n", "/**\n * dd-elements.ts 5.1.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n", "/**\r\n * gridstack-dd.ts 5.1.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack, MousePosition } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// TEST let count = 0;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    GridStackDD.get().droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let parent = this.el.getBoundingClientRect();\r\n    let {top, left} = helper.getBoundingClientRect();\r\n    left -= parent.left;\r\n    top -= parent.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          GridStackDD.get().off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // prevent deeper nesting until rest of 992 can be fixed\r\n        if (node?.subGrid) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // TEST console.log(`over ${this.el.gridstack.opts.id} ${count++}`);\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // TEST console.log('dropover without leave');\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore private read only on ourself\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // TEST console.log('dropover cloning node');\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // TEST console.log(`out ${this.el.gridstack.opts.id} ${count++}`);\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // TEST console.log('drop delete _gridstackNodeOrig')\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n        // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, _dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  let dd = GridStackDD.get();\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  let dd = GridStackDD.get();\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      dd.remove(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        dd.remove(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        if (!node._temporaryRemoved) {\r\n          // move to new placeholder location\r\n          Utils.removePositioningStyles(target);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n        } else {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.removePositioningStyles(target);\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    dd.draggable(el, 'disable');\r\n    el.classList.add('ui-draggable-disabled');\r\n  } else {\r\n    dd.draggable(el, 'enable');\r\n    el.classList.remove('ui-draggable-disabled');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    dd.resizable(el, 'disable');\r\n    el.classList.add('ui-resizable-disabled');\r\n  } else {\r\n    dd.resizable(el, 'enable');\r\n    el.classList.remove('ui-resizable-disabled');\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // TEST console.log('_onStartMoving placeholder')\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // TEST console.log('engine.addNode x=' + node.x);\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    let dd = GridStackDD.get()\r\n      .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // TEST console.log('leave delete _gridstackNodeOrig')\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n", "/**\n * gridstack-dd-native.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n"],
  "mappings": "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",
  "names": ["el"]
}

{
  "version": 3,
  "sources": ["../../gridstack/src/utils.ts", "../../gridstack/src/gridstack-engine.ts", "../../gridstack/src/gridstack-ddi.ts", "../../gridstack/src/gridstack.ts"],
  "sourcesContent": ["/**\r\n * utils.ts 5.1.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\n// list of fields we will skip during cloneDeep (nested objects, other internal)\r\nconst skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n", "/**\n * gridstack-engine.ts 5.1.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  protected static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.batchMode = true;\n    this._prevFloat = this._float;\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\n    return this.saveInitial(); // since begin update (which is called multiple times) won't do this\n  }\n\n  public commit(): GridStackEngine {\n    if (!this.batchMode) return this;\n    this.batchMode = false;\n    this._float = this._prevFloat;\n    delete this._prevFloat;\n    return this._packNodes()\n      ._notify();\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return collide;\n  }\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.commit();\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this.sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // make sure we are still valid size\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\n    if (!canMove && !o.resizing) {\n      let collide = this.collide(node, o);\n      if (collide && this.swap(node, collide)) {\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    if (o.pack === undefined) o.pack = true;\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      // now check to make sure we actually collided over 50% surface area while dragging\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      // delete internals\n      for (let key in w) { if (key[0] === '_' || w[key] === null || w[key] === undefined ) delete w[key]; }\n      delete w.grid;\n      if (!saveElement) delete w.el;\n      // delete default values (will be re-created on read)\n      if (!w.autoPosition) delete w.autoPosition;\n      if (!w.noResize) delete w.noResize;\n      if (!w.noMove) delete w.noMove;\n      if (!w.locked) delete w.locked;\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.commit();\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n", "/**\r\n * gridstack-ddi.ts 5.1.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n", "/*!\r\n * GridStack 5.1.1\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  oneColumnSize: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(GridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      parentGridItemEl.classList.add('grid-stack-nested');\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      // if column special case it set, remember that flag and set default\r\n      let autoColumn: boolean;\r\n      let ops = node.subGrid as GridStackOptions;\r\n      if (ops.column === 'auto') {\r\n        ops.column = node.w;\r\n        ops.disableOneColumnMode = true; // driven by parent\r\n        autoColumn = true;\r\n      }\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n      if (autoColumn) { node.subGrid._autoColumn = true; }\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.opts._isNested) {\r\n      if (this.opts.column !== this.opts._isNested.w) {\r\n        changedColumn = true;\r\n        this.column(this.opts._isNested.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n}\r\n"],
  "mappings": "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",
  "names": ["n", "el", "name"]
}
